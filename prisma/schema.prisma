// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Academy {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  phone     String?
  email     String?
  address   String?
  handle    String
  createdAt DateTime?     @default(now()) @map(name: "created_at")
  updatedAt DateTime?     @updatedAt @map(name: "updated_at")
  users     UserAcademy[]
  clients   Client[]
}

model UserAcademy {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String
  email     String?
  salt      String
  hash      String
  role      Role
  academy   Academy?  @relation(fields: [academyId], references: [id])
  academyId String?   @db.ObjectId
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
}

enum Role {
  ADMIN
  INSTRUCTOR
  SECRETARY
  SUPER_ADMIN
}

model Payment {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  date      DateTime
  comment   String?
  type      PaymentType? @default(MONEY)
  client    Client?      @relation(fields: [clientId], references: [id])
  clientId  String?      @db.ObjectId
  createdAt DateTime?    @default(now()) @map(name: "created_at")
  updatedAt DateTime?    @updatedAt @map(name: "updated_at")
}

enum PaymentType {
  MONEY
  CLASS
}

model PracticalExam {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  date         DateTime
  comment      String?
  paid         Boolean
  time         String?
  notified     Boolean
  client       Client?             @relation(fields: [clientId], references: [id])
  clientId     String?             @db.ObjectId
  result       PracticalExamResult @relation(fields: [examResultId], references: [id])
  createdAt    DateTime?           @default(now()) @map(name: "created_at")
  updatedAt    DateTime?           @updatedAt @map(name: "updated_at")
  examResultId String              @unique @db.ObjectId
  status       Status?             @default(PENDING)
}

model PracticalExamResult {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  street  Boolean
  circuit Boolean
  exam    PracticalExam?
}

model TheoryExam {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  comment   String?
  client    Client?   @relation(fields: [clientId], references: [id])
  clientId  String?   @db.ObjectId
  result    Boolean
  time      String?
  notified  Boolean
  createdAt DateTime? @default(now()) @map(name: "created_at")
  updatedAt DateTime? @updatedAt @map(name: "updated_at")
  status    Status?   @default(PENDING)
}

enum Status {
  CANCELED
  PENDING
  DONE
  ABSENT
}

model Class {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  comment    String?
  client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?   @db.ObjectId
  time       String?
  notified   Boolean?
  instructor String?
  status     Status?   @default(PENDING)
  paid       Boolean?  @default(false)
  createdAt  DateTime? @default(now()) @map(name: "created_at")
  updatedAt  DateTime? @updatedAt @map(name: "updated_at")
}

model Client {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  lastName       String?
  fullName       String?
  email          String?
  address        String
  ci             String
  phone          String
  secondaryPhone String?
  notes          String?
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @updatedAt @map(name: "updated_at")
  academyId      String?         @db.ObjectId
  academy        Academy?        @relation(fields: [academyId], references: [id])
  payments       Payment[]
  practicalExams PracticalExam[]
  theoryExams    TheoryExam[]
  classes        Class[]
  status         ClientStatus?   @default(ACTIVE)
  knownUsBy      knownUsBy?

  @@map(name: "clients")
}

enum knownUsBy {
  GOOGLE
  FRIEND
  SOCIAL_NETWORK
  EMAIL
  STREET
  OTHER
  NA
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  DONE
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
